"""
Django settings for bookmarks project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from django.urls import reverse_lazy

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'sdk-q!l-!r)&)!289^d%ys_j&@74ae+e(y!90211bzvh!0@fz1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition
#将我们的应用放在应用列表的最前面，Django会按照INSTALLED_APPS中的顺序寻找验证模板
INSTALLED_APPS = [
    'account.apps.AccountConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    #django.contrib.contenttypes模块中提供了一个contenttypes框架，这个框架可以追踪当前项目内所有已经激活的应用中的所有模型，并且提供了一个通用的接口可以操作模型
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    #消息模块
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'images.apps.ImagesConfig',
    'sorl.thumbnail',
    'actions.apps.ActionsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    #处理当前http请求的session
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    #此中间件是将用户与http请求联系起来
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
#验证模块还包含以下数据模型：
# User 一个用户数据表，包含主要字段：username,password,email,first_name,last_name,is_active
#Group 用户组表
#Permission 存放用户和组的权限

ROOT_URLCONF = 'bookmarks.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookmarks.wsgi.application'

#AUTHENTICATION_BACKENDS验证有顺序（从前到后）的，如果一个用户信息对于多个验证后端都有效，Django会停止在第一个成功验证的后端处
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    #自定义的验证规则
    "account.authenticate.EmailAuthBackend",
]

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,"static"),
]

#如果没有指定next参数，登录成功后重定向的url
LOGIN_REDIRECT_URL = "dashboard"
#用户需要登录的情况下，被重定向的url
LOGIN_URL = "login"
LOGOUT_URL = "logout"

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = 'smtp.126.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = 'hoofeycheng_2018@126.com'
EMAIL_HOST_PASSWORD = 'QCHFT9696'
EMAIL_USE_TLS = True
# SERVER_EMAIL = 'hoofeycheng_2018@126.com'
DEFAULT_FROM_EMAIL = 'hoofeycheng_2018@126.com'

#媒体文件：图片上传
#表示存放和提供用户上传文件的url路径
MEDIA_URL = "/media/"
#表示实际媒体文件的存放目录
MEDIA_ROOT = os.path.join(BASE_DIR,"media")


THUMBNAIL_DEBUG = True

#Django 动态的为所有ABSOLUTE_URL_OVERRIDES中列出的模型添加.get_absolute_url方法，这个方法按照设置中的结果返回规范化的url，这里通过一个匿名函数返回规范化的url，这个匿名函数被绑定在对象上，作为调用.get_absolute_url时候实际调用的函数
ABSOLUTE_URL_OVERRIDES = {
    "auth.user":lambda u:reverse_lazy("user_detail",args=[u.username]),
}

REDIS_HOST = "localhost"
REDIS_PORT = 6379
REDIS_DB = 2



